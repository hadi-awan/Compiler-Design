/* HL.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. HL.java */
public class HL/*@bgen(jjtree)*/implements HLTreeConstants, HLConstants {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

//==================================================================
//                         P A R S E R
//==================================================================

//------------------------    STATEMENTS, BODIES AND CLAUSES -----------------------------------

// ------------------------------- BEGINNING -----------------------------------
  static final public 
SimpleNode start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case VBAR:
    case LROUND:
    case LCURLY:
    case LSQUARE:
    case FOR:
    case FUNCTION:
    case IF:
    case PRINT:
    case PRINTLN:
    case RETURN:
    case VAR:
    case WHILE:
    case NUMBER:
    case IDNUM:
    case IDSET:
    case IDBOOL:{
      S();
{if ("" != null) return (SimpleNode) (jjtree.popNode());}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if (true) throw new ParseException("End of File.");}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public void S() throws ParseException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:
    case FUNCTION:
    case IF:
    case PRINT:
    case PRINTLN:
    case RETURN:
    case VAR:
    case WHILE:{
      statement_LL1();
      jj_consume_token(SEMICOL);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2147483647)) {
        assign_stat();
        jj_consume_token(SEMICOL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case VBAR:
        case LROUND:
        case LCURLY:
        case LSQUARE:
        case NUMBER:
        case IDNUM:
        case IDSET:{
          expression();
          jj_consume_token(SEMICOL);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

//------------------------    STATEMENTS, BODIES AND CLAUSES -----------------------------------

// These are all the statements which can be differentiated from each other 
// with a single lookahead
  static final public 
void statement_LL1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      var_decl();
      break;
      }
    case FUNCTION:{
      fn_decl();
      break;
      }
    case RETURN:{
      return_stat();
      break;
      }
    case PRINT:{
      print_stat();
      break;
      }
    case PRINTLN:{
      println_stat();
      break;
      }
    case IF:{
      if_stat();
      break;
      }
    case FOR:{
      for_stat();
      break;
      }
    case WHILE:{
      while_stat();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:
    case FUNCTION:
    case IF:
    case PRINT:
    case PRINTLN:
    case RETURN:
    case VAR:
    case WHILE:{
      statement_LL1();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_2(2)) {
        fn_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDNUM:
        case IDSET:
        case IDBOOL:{
          assign_stat();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void body() throws ParseException {/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR:
        case FUNCTION:
        case IF:
        case PRINT:
        case PRINTLN:
        case RETURN:
        case VAR:
        case WHILE:
        case IDNUM:
        case IDSET:
        case IDBOOL:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
        statement();
        jj_consume_token(SEMICOL);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void clause() throws ParseException {/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        statement();
        jj_consume_token(SEMICOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR:
        case FUNCTION:
        case IF:
        case PRINT:
        case PRINTLN:
        case RETURN:
        case VAR:
        case WHILE:
        case IDNUM:
        case IDSET:
        case IDBOOL:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

//---------------------------   DECLARATIONS ------------------------------------------------
  static final public 
void var_decl() throws ParseException {
    jj_consume_token(VAR);
    var_list();
}

  static final public void var_list() throws ParseException {
ASTvar_decl jjtn001 = new ASTvar_decl(JJTVAR_DECL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      identifier();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        identifier();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
}

  static final public void fn_decl() throws ParseException {/*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      identifier();
      jj_consume_token(LROUND);
      ident_list();
      jj_consume_token(RROUND);
      body();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void ident_list() throws ParseException {/*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDNUM:
      case IDSET:
      case IDBOOL:{
        identifier();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          identifier();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void identifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDNUM:{
      idnum();
      break;
      }
    case IDSET:{
      idset();
      break;
      }
    case IDBOOL:{
      idbool();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//---------------------------   FUNCTION CALLS AND RETURNS ----------------------------------
// parameter and return values can be numbers, sets, or booleans
  static final public 
void fn_call() throws ParseException {/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDNUM:{
        idnum();
        jj_consume_token(LROUND);
        value_list();
        jj_consume_token(RROUND);
        break;
        }
      case IDSET:{
        idset();
        jj_consume_token(LROUND);
        value_list();
        jj_consume_token(RROUND);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void boolean_call() throws ParseException {/*@bgen(jjtree) boolean_call */
  ASTboolean_call jjtn000 = new ASTboolean_call(JJTBOOLEAN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idbool();
      jj_consume_token(LROUND);
      value_list();
      jj_consume_token(RROUND);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void value_list() throws ParseException {/*@bgen(jjtree) value_list */
  ASTvalue_list jjtn000 = new ASTvalue_list(JJTVALUE_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case VBAR:
      case NOT:
      case LROUND:
      case LCURLY:
      case LSQUARE:
      case TRUE:
      case FALSE:
      case NUMBER:
      case IDNUM:
      case IDSET:
      case IDBOOL:{
        value();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          value();
        }
        break;
        }
      default:
        jj_la1[14] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void return_stat() throws ParseException {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      value();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void value() throws ParseException {
    if (jj_2_3(2147483647)) {
      condition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case VBAR:
      case LROUND:
      case LCURLY:
      case LSQUARE:
      case NUMBER:
      case IDNUM:
      case IDSET:{
        expression();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

//---------------------------   MISCELLANEOUS STATEMENTS ----------------------------------
  static final public 
void assign_stat() throws ParseException {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDNUM:{
        idnum();
        jj_consume_token(ASSIGN);
        expression();
        break;
        }
      case IDSET:{
        idset();
        jj_consume_token(ASSIGN);
        expression();
        break;
        }
      case IDBOOL:{
        idbool();
        jj_consume_token(ASSIGN);
        condition();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void print_stat() throws ParseException {/*@bgen(jjtree) Print */
  ASTPrint jjtn000 = new ASTPrint(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      print_list();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void println_stat() throws ParseException {/*@bgen(jjtree) Println */
  ASTPrintln jjtn000 = new ASTPrintln(JJTPRINTLN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINTLN);
      println_list();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void println_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case VBAR:
    case NOT:
    case LROUND:
    case LCURLY:
    case LSQUARE:
    case TRUE:
    case FALSE:
    case NUMBER:
    case IDNUM:
    case IDSET:
    case IDBOOL:
    case STRING:{
      print_list();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
ASTprint_list jjtn001 = new ASTprint_list(JJTPRINT_LIST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;

      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    }
}

  static final public void print_list() throws ParseException {/*@bgen(jjtree) print_list */
  ASTprint_list jjtn000 = new ASTprint_list(JJTPRINT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case VBAR:
      case NOT:
      case LROUND:
      case LCURLY:
      case LSQUARE:
      case TRUE:
      case FALSE:
      case NUMBER:
      case IDNUM:
      case IDSET:
      case IDBOOL:{
        value();
        break;
        }
      case STRING:{
        string();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case VBAR:
        case NOT:
        case LROUND:
        case LCURLY:
        case LSQUARE:
        case TRUE:
        case FALSE:
        case NUMBER:
        case IDNUM:
        case IDSET:
        case IDBOOL:{
          value();
          break;
          }
        case STRING:{
          string();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

//---------------------------   IF AND LOOP STATEMENTS  ----------------------------------
  static final public 
void if_stat() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      clause();
      else_clause();
      jj_consume_token(FI);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void else_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELIF:{
ASTIf jjtn001 = new ASTIf(JJTIF);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ELIF);
        condition();
        jj_consume_token(THEN);
        clause();
        else_clause();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      break;
      }
    case ELSE:{
      jj_consume_token(ELSE);
      clause();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
ASTNULL jjtn002 = new ASTNULL(JJTNULL);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
     jjtc002 = false;

      } finally {
if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
    }
}

  static final public void for_stat() throws ParseException {/*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      idnum();
      jj_consume_token(IN);
      exp_list();
      jj_consume_token(DO);
      body();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void exp_list() throws ParseException {/*@bgen(jjtree) exp_list */
  ASTexp_list jjtn000 = new ASTexp_list(JJTEXP_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void while_stat() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      body();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

//---------------------------   CONDITIONS ---------------------------------------------------
// Conditions will evaluate to Boolean value True or False
  static final public 
void condition() throws ParseException {
ASTor jjtn001 = new ASTor(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      and_clause();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VBAR:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
        jj_consume_token(VBAR);
        and_clause();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
}

  static final public void and_clause() throws ParseException {
ASTand jjtn001 = new ASTand(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      not_clause();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        jj_consume_token(AND);
        not_clause();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
}

  static final public void not_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
ASTnot jjtn001 = new ASTnot(JJTNOT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        not_clause();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_4(2147483647)) {
        comparison();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LROUND:{
          jj_consume_token(LROUND);
          condition();
          jj_consume_token(RROUND);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          if (jj_2_5(2)) {
            boolean_call();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDBOOL:{
              idbool();
              break;
              }
            case TRUE:{
ASTTRUE jjtn002 = new ASTTRUE(JJTTRUE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
              try {
                jj_consume_token(TRUE);
              } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
              }
              break;
              }
            case FALSE:{
ASTFALSE jjtn003 = new ASTFALSE(JJTFALSE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
              try {
                jj_consume_token(FALSE);
              } finally {
if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
              }
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
}

  static final public void comparison() throws ParseException {/*@bgen(jjtree) comparison */
  ASTcomparison jjtn000 = new ASTcomparison(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      comparator();
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:{
ASTLESS jjtn001 = new ASTLESS(JJTLESS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LESS);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
      }
    case LESSEQ:{
ASTLESSEQ jjtn002 = new ASTLESSEQ(JJTLESSEQ);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(LESSEQ);
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
      }
    case GREATER:{
ASTGREATER jjtn003 = new ASTGREATER(JJTGREATER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(GREATER);
      } finally {
if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
      }
    case GREATEQ:{
ASTGREATEQ jjtn004 = new ASTGREATEQ(JJTGREATEQ);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(GREATEQ);
      } finally {
if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      break;
      }
    case EQUAL:{
ASTEQUAL jjtn005 = new ASTEQUAL(JJTEQUAL);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
      }
      break;
      }
    case NOTEQ:{
ASTNOTEQ jjtn006 = new ASTNOTEQ(JJTNOTEQ);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(NOTEQ);
      } finally {
if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
      }
      break;
      }
    case ISIN:{
ASTISIN jjtn007 = new ASTISIN(JJTISIN);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(ISIN);
      } finally {
if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
      }
      break;
      }
    case NOTIN:{
ASTNOTIN jjtn008 = new ASTNOTIN(JJTNOTIN);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(NOTIN);
      } finally {
if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
      }
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//---------------------------   EXPRESSIONS ------------------------------------------------
// Expressions will evaluate to sets or numbers
  static final public 
void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
ASTsum jjtn001 = new ASTsum(JJTSUM);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(PLUS);
        product();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:
          case MINUS:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_10;
          }
          summand();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
      }
      break;
      }
    case MINUS:{
ASTsum jjtn002 = new ASTsum(JJTSUM);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        neg();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:
          case MINUS:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_11;
          }
          summand();
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
      }
    case VBAR:
    case LROUND:
    case LCURLY:
    case LSQUARE:
    case NUMBER:
    case IDNUM:
    case IDSET:{
ASTsum jjtn003 = new ASTsum(JJTSUM);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        product();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:
          case MINUS:{
            ;
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            break label_12;
          }
          summand();
        }
      } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
          }
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void neg() throws ParseException {/*@bgen(jjtree) neg */
  ASTneg jjtn000 = new ASTneg(JJTNEG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
      product();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void summand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
ASTpos jjtn001 = new ASTpos(JJTPOS);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        product();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
      }
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
ASTneg jjtn002 = new ASTneg(JJTNEG);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
      try {
        product();
      } catch (Throwable jjte002) {
if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte002;}
              }
              if (jjte002 instanceof ParseException) {
                {if (true) throw (ParseException)jjte002;}
              }
              {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
      }
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void product() throws ParseException {
    term();
    moreterms();
}

  static final public void moreterms() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMES:{
ASTmul jjtn001 = new ASTmul(JJTMUL);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TIMES);
        term();
      } catch (Throwable jjte001) {
if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  2);
   }
      }
      moreterms();
      break;
      }
    case DIV:{
ASTdiv jjtn002 = new ASTdiv(JJTDIV);
   boolean jjtc002 = true;
   jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(DIV);
        term();
      } catch (Throwable jjte002) {
if (jjtc002) {
     jjtree.clearNodeScope(jjtn002);
     jjtc002 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte002 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte002;}
   }
   if (jjte002 instanceof ParseException) {
     {if (true) throw (ParseException)jjte002;}
   }
   {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
     jjtree.closeNodeScope(jjtn002,  2);
   }
      }
      moreterms();
      break;
      }
    case MOD:{
ASTmod jjtn003 = new ASTmod(JJTMOD);
   boolean jjtc003 = true;
   jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(MOD);
        term();
      } catch (Throwable jjte003) {
if (jjtc003) {
     jjtree.clearNodeScope(jjtn003);
     jjtc003 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte003 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte003;}
   }
   if (jjte003 instanceof ParseException) {
     {if (true) throw (ParseException)jjte003;}
   }
   {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
     jjtree.closeNodeScope(jjtn003,  2);
   }
      }
      moreterms();
      break;
      }
    default:
      jj_la1[34] = jj_gen;

    }
}

  static final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LROUND:{
      jj_consume_token(LROUND);
      expression();
      jj_consume_token(RROUND);
      break;
      }
    case VBAR:{
ASTAbsolute_value jjtn001 = new ASTAbsolute_value(JJTABSOLUTE_VALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(VBAR);
        expression();
        jj_consume_token(VBAR);
      } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      if (jj_2_6(2)) {
        fn_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LCURLY:
        case LSQUARE:
        case NUMBER:
        case IDNUM:
        case IDSET:{
          simple_term();
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void simple_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDNUM:{
      idnum();
      break;
      }
    case IDSET:{
      idset();
      break;
      }
    case NUMBER:{
      number();
      break;
      }
    case LSQUARE:{
      interval();
      break;
      }
    case LCURLY:{
      jj_consume_token(LCURLY);
      set_defs();
      jj_consume_token(RCURLY);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void interval() throws ParseException {/*@bgen(jjtree) interval */
  ASTinterval jjtn000 = new ASTinterval(JJTINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LSQUARE);
      expression();
      jj_consume_token(COMMA);
      expression();
      jj_consume_token(RSQUARE);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void set_defs() throws ParseException {
    if (jj_2_7(2)) {
      set_former();
    } else {
      set();
    }
}

  static final public void set_former() throws ParseException {/*@bgen(jjtree) set_former */
  ASTset_former jjtn000 = new ASTset_former(JJTSET_FORMER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idnum();
      domain();
      jj_consume_token(VBAR);
      condition();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void domain() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:{
      jj_consume_token(IN);
      expression();
      break;
      }
    default:
      jj_la1[38] = jj_gen;
ASTNULL jjtn001 = new ASTNULL(JJTNULL);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;

      } finally {
if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
    }
}

  static final public void set() throws ParseException {/*@bgen(jjtree) set */
  ASTset jjtn000 = new ASTset(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case VBAR:
      case LROUND:
      case LCURLY:
      case LSQUARE:
      case NUMBER:
      case IDNUM:
      case IDSET:{
        expression();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[39] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          expression();
        }
        break;
        }
      default:
        jj_la1[40] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// Nodified Tokens
  static final public 
void idnum() throws ParseException {/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDNUM);
      typenum();
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void typenum() throws ParseException {/*@bgen(jjtree) typenum */
  ASTtypenum jjtn000 = new ASTtypenum(JJTTYPENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;

    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
}

  static final public void idset() throws ParseException {/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDSET);
      typeset();
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void typeset() throws ParseException {/*@bgen(jjtree) typeset */
  ASTtypeset jjtn000 = new ASTtypeset(JJTTYPESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;

    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
}

  static final public void idbool() throws ParseException {/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDBOOL);
      typebool();
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void typebool() throws ParseException {/*@bgen(jjtree) typebool */
  ASTtypebool jjtn000 = new ASTtypebool(JJTTYPEBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;

    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
}

  static final public void number() throws ParseException {/*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void string() throws ParseException {/*@bgen(jjtree) string */
 ASTstring jjtn000 = new ASTstring(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_simple_term_371_9_78()
 {
    if (jj_3R_idnum_411_4_40()) return true;
    return false;
  }

  static private boolean jj_3R_simple_term_371_9_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_term_371_9_78()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_term_372_3_79()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_term_373_3_80()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_term_374_3_81()) {
    jj_scanpos = xsp;
    if (jj_3R_simple_term_375_9_82()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_simple_term_374_3_81()
 {
    if (jj_3R_interval_381_9_86()) return true;
    return false;
  }

  static private boolean jj_3R_simple_term_373_3_80()
 {
    if (jj_3R_number_429_4_85()) return true;
    return false;
  }

  static private boolean jj_3R_simple_term_372_3_79()
 {
    if (jj_3R_idset_417_4_42()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_fn_call_202_9_15()) return true;
    return false;
  }

  static private boolean jj_3R_term_363_9_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_term_363_9_65()) {
    jj_scanpos = xsp;
    if (jj_3R_term_365_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_term_366_3_67()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_term_363_9_65()
 {
    if (jj_scan_token(LROUND)) return true;
    if (jj_3R_expression_333_9_17()) return true;
    if (jj_scan_token(RROUND)) return true;
    return false;
  }

  static private boolean jj_3R_term_366_3_67()
 {
    if (jj_3R_simple_term_371_9_75()) return true;
    return false;
  }

  static private boolean jj_3R_term_365_3_66()
 {
    if (jj_scan_token(VBAR)) return true;
    if (jj_3R_expression_333_9_17()) return true;
    if (jj_scan_token(VBAR)) return true;
    return false;
  }

  static private boolean jj_3R_moreterms_358_3_71()
 {
    return false;
  }

  static private boolean jj_3R_moreterms_358_2_70()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_term_363_9_61()) return true;
    if (jj_3R_moreterms_356_2_62()) return true;
    return false;
  }

  static private boolean jj_3R_product_350_9_45()
 {
    if (jj_3R_term_363_9_61()) return true;
    if (jj_3R_moreterms_356_2_62()) return true;
    return false;
  }

  static private boolean jj_3R_moreterms_357_2_69()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_term_363_9_61()) return true;
    if (jj_3R_moreterms_356_2_62()) return true;
    return false;
  }

  static private boolean jj_3R_moreterms_356_2_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_moreterms_356_2_68()) {
    jj_scanpos = xsp;
    if (jj_3R_moreterms_357_2_69()) {
    jj_scanpos = xsp;
    if (jj_3R_moreterms_358_2_70()) {
    jj_scanpos = xsp;
    if (jj_3R_moreterms_358_3_71()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_moreterms_356_2_68()
 {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_term_363_9_61()) return true;
    if (jj_3R_moreterms_356_2_62()) return true;
    return false;
  }

  static private boolean jj_3R_summand_345_9_73()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_product_350_9_45()) return true;
    return false;
  }

  static private boolean jj_3R_summand_344_9_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_summand_344_9_72()) {
    jj_scanpos = xsp;
    if (jj_3R_summand_345_9_73()) return true;
    }
    return false;
  }

  static private boolean jj_3R_summand_344_9_72()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_product_350_9_45()) return true;
    return false;
  }

  static private boolean jj_3R_expression_332_19_46()
 {
    if (jj_3R_summand_344_9_63()) return true;
    return false;
  }

  static private boolean jj_3R_neg_340_9_47()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_product_350_9_45()) return true;
    return false;
  }

  static private boolean jj_3R_expression_334_15_49()
 {
    if (jj_3R_summand_344_9_63()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_fn_call_202_9_15()) return true;
    return false;
  }

  static private boolean jj_3R_expression_335_9_30()
 {
    if (jj_3R_product_350_9_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expression_334_15_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_expression_333_11_48()
 {
    if (jj_3R_summand_344_9_63()) return true;
    return false;
  }

  static private boolean jj_3R_expression_334_9_29()
 {
    if (jj_3R_neg_340_9_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expression_333_11_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_expression_333_9_28()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_product_350_9_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expression_332_19_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_expression_333_9_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expression_333_9_28()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_334_9_29()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_335_9_30()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_identifier_190_9_14()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_325_3_38()
 {
    if (jj_scan_token(NOTIN)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_324_3_37()
 {
    if (jj_scan_token(ISIN)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_318_9_31()
 {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_318_9_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparator_318_9_31()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_319_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_320_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_321_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_322_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_323_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_324_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_325_3_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_comparator_323_3_36()
 {
    if (jj_scan_token(NOTEQ)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_322_3_35()
 {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_321_3_34()
 {
    if (jj_scan_token(GREATEQ)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_320_3_33()
 {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_319_3_32()
 {
    if (jj_scan_token(LESSEQ)) return true;
    return false;
  }

  static private boolean jj_3R_comparison_313_9_64()
 {
    if (jj_3R_expression_333_9_17()) return true;
    if (jj_3R_comparator_318_9_18()) return true;
    if (jj_3R_expression_333_9_17()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_expression_333_9_17()) return true;
    if (jj_3R_comparator_318_9_18()) return true;
    return false;
  }

  static private boolean jj_3R_and_clause_296_18_44()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_not_clause_301_9_43()) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_305_9_58()
 {
    if (jj_3R_idbool_423_4_39()) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_302_9_56()
 {
    if (jj_3R_comparison_313_9_64()) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_308_3_60()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_301_9_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_not_clause_301_9_55()) {
    jj_scanpos = xsp;
    if (jj_3R_not_clause_302_9_56()) {
    jj_scanpos = xsp;
    if (jj_3R_not_clause_303_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_not_clause_305_9_58()) {
    jj_scanpos = xsp;
    if (jj_3R_not_clause_307_3_59()) {
    jj_scanpos = xsp;
    if (jj_3R_not_clause_308_3_60()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_not_clause_301_9_55()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_not_clause_301_9_43()) return true;
    return false;
  }

  static private boolean jj_3R_not_clause_307_3_59()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_condition_291_18_27()
 {
    if (jj_scan_token(VBAR)) return true;
    if (jj_3R_and_clause_297_9_26()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_boolean_call_208_9_19()) return true;
    return false;
  }

  static private boolean jj_3R_and_clause_297_9_26()
 {
    if (jj_3R_not_clause_301_9_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_and_clause_296_18_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_not_clause_303_3_57()
 {
    if (jj_scan_token(LROUND)) return true;
    if (jj_3R_condition_292_9_16()) return true;
    if (jj_scan_token(RROUND)) return true;
    return false;
  }

  static private boolean jj_3R_condition_292_9_16()
 {
    if (jj_3R_and_clause_297_9_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_condition_291_18_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_typebool_425_23_50()
 {
    return false;
  }

  static private boolean jj_3R_typeset_419_22_54()
 {
    return false;
  }

  static private boolean jj_3R_typenum_413_22_51()
 {
    return false;
  }

  static private boolean jj_3R_number_429_4_85()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_condition_292_9_16()) return true;
    return false;
  }

  static private boolean jj_3R_idbool_423_4_39()
 {
    if (jj_scan_token(IDBOOL)) return true;
    if (jj_3R_typebool_425_23_50()) return true;
    return false;
  }

  static private boolean jj_3R_value_223_9_88()
 {
    if (jj_3R_condition_292_9_16()) return true;
    return false;
  }

  static private boolean jj_3R_value_223_9_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_value_223_9_88()) {
    jj_scanpos = xsp;
    if (jj_3R_value_224_3_89()) return true;
    }
    return false;
  }

  static private boolean jj_3R_idset_417_4_42()
 {
    if (jj_scan_token(IDSET)) return true;
    if (jj_3R_typeset_419_22_54()) return true;
    return false;
  }

  static private boolean jj_3R_set_402_17_94()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_333_9_17()) return true;
    return false;
  }

  static private boolean jj_3R_value_224_3_89()
 {
    if (jj_3R_expression_333_9_17()) return true;
    return false;
  }

  static private boolean jj_3R_value_list_212_12_84()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_value_223_9_83()) return true;
    return false;
  }

  static private boolean jj_3R_idnum_411_4_40()
 {
    if (jj_scan_token(IDNUM)) return true;
    if (jj_3R_typenum_413_22_51()) return true;
    return false;
  }

  static private boolean jj_3R_value_list_213_9_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_value_list_212_3_76()) {
    jj_scanpos = xsp;
    if (jj_3R_value_list_214_3_77()) return true;
    }
    return false;
  }

  static private boolean jj_3R_set_403_9_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_set_402_3_92()) {
    jj_scanpos = xsp;
    if (jj_3R_set_404_3_93()) return true;
    }
    return false;
  }

  static private boolean jj_3R_boolean_call_208_9_19()
 {
    if (jj_3R_idbool_423_4_39()) return true;
    if (jj_scan_token(LROUND)) return true;
    if (jj_3R_value_list_213_9_74()) return true;
    if (jj_scan_token(RROUND)) return true;
    return false;
  }

  static private boolean jj_3R_value_list_214_3_77()
 {
    return false;
  }

  static private boolean jj_3R_set_404_3_93()
 {
    return false;
  }

  static private boolean jj_3R_value_list_212_3_76()
 {
    if (jj_3R_value_223_9_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_value_list_212_12_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_set_402_3_92()
 {
    if (jj_3R_expression_333_9_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_set_402_17_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_domain_396_9_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_domain_396_9_52()) {
    jj_scanpos = xsp;
    if (jj_3R_domain_398_4_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_domain_396_9_52()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_expression_333_9_17()) return true;
    return false;
  }

  static private boolean jj_3R_fn_call_202_9_25()
 {
    if (jj_3R_idset_417_4_42()) return true;
    if (jj_scan_token(LROUND)) return true;
    if (jj_3R_value_list_213_9_74()) return true;
    if (jj_scan_token(RROUND)) return true;
    return false;
  }

  static private boolean jj_3R_fn_call_202_9_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_fn_call_201_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_fn_call_202_9_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_domain_398_4_53()
 {
    return false;
  }

  static private boolean jj_3R_set_former_392_9_20()
 {
    if (jj_3R_idnum_411_4_40()) return true;
    if (jj_3R_domain_396_9_41()) return true;
    if (jj_scan_token(VBAR)) return true;
    if (jj_3R_condition_292_9_16()) return true;
    return false;
  }

  static private boolean jj_3R_fn_call_201_3_24()
 {
    if (jj_3R_idnum_411_4_40()) return true;
    if (jj_scan_token(LROUND)) return true;
    if (jj_3R_value_list_213_9_74()) return true;
    if (jj_scan_token(RROUND)) return true;
    return false;
  }

  static private boolean jj_3R_interval_381_9_86()
 {
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_expression_333_9_17()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_333_9_17()) return true;
    if (jj_scan_token(RSQUARE)) return true;
    return false;
  }

  static private boolean jj_3R_identifier_190_9_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_identifier_190_9_21()) {
    jj_scanpos = xsp;
    if (jj_3R_identifier_191_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_identifier_192_3_23()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_identifier_190_9_21()
 {
    if (jj_3R_idnum_411_4_40()) return true;
    return false;
  }

  static private boolean jj_3R_set_defs_386_3_90()
 {
    if (jj_3R_set_403_9_91()) return true;
    return false;
  }

  static private boolean jj_3R_set_defs_385_3_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_set_defs_386_3_90()) return true;
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_set_former_392_9_20()) return true;
    return false;
  }

  static private boolean jj_3R_identifier_192_3_23()
 {
    if (jj_3R_idbool_423_4_39()) return true;
    return false;
  }

  static private boolean jj_3R_identifier_191_3_22()
 {
    if (jj_3R_idset_417_4_42()) return true;
    return false;
  }

  static private boolean jj_3R_simple_term_375_9_82()
 {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_set_defs_385_3_87()) return true;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x721801,0x0,0x721800,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x4000000,0x30761800,0x721800,0x0,0x30761800,0x30761800,0x4000000,0x30761800,0x80000000,0x4000000,0x20000,0x10000,0x40000,0x100000,0x30000000,0x7e0,0x1800,0x1800,0x1800,0x721800,0x1800,0xe000,0x120000,0x600000,0x600000,0x0,0x4000000,0x721800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x786e38,0x6e38,0x380000,0x6e38,0x6e38,0x700000,0x706e38,0x706e38,0x0,0x0,0x700000,0x700000,0x300000,0x0,0x780000,0x380000,0x700000,0xf80000,0xf80000,0x0,0xf80000,0x1,0x0,0x0,0x0,0x0,0x0,0x400000,0x180,0x0,0x0,0x0,0x380000,0x0,0x0,0x0,0x380000,0x380000,0x40,0x0,0x380000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HL(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HL(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new HLTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HL(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new HLTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new HLTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HL(HLTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HLTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 41; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[57];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 41; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 57; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 7; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
